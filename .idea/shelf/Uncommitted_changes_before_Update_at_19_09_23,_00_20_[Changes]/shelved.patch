Index: tasks/serializer.py
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+>from rest_framework import serializers\nfrom rest_framework.fields import SerializerMethodField\nfrom rest_framework.serializers import ModelSerializer\n\nfrom tasks.models import Column, Board, Tasks, Subtasks\n\n\nclass ColumnModelSerializer(ModelSerializer):\n    class Meta:\n        model = Column\n        fields = ('name', 'board')\n\n\nclass CreateBoardSerializer(serializers.Serializer):\n    name = serializers.CharField(max_length=150)\n    columns = serializers.ListField(child=serializers.CharField())\n\n\nclass BordModelSerializer(ModelSerializer):\n    class Meta:\n        model = Board\n        fields = ('name',)\n\n    def to_representation(self, instance):\n        rep = super().to_representation(instance)\n        rep[\"columns\"] = instance.get_columns()\n        return rep\n\n\nclass BoardColumnSerializer(ModelSerializer):\n    column = SerializerMethodField()\n\n    def get_choices(self, obj):\n        column = Column.objects.filter(name=obj)\n        return ColumnModelSerializer(column, many=True).data\n\n    class Meta:\n        model = Board\n        fields = ('id', 'column')\n\n\nclass SubtaskSerializer(serializers.ModelSerializer):\n    class Meta:\n        model = Subtasks\n        fields = '__all__'\n\n\nclass TaskSerializer(serializers.ModelSerializer):\n    subtasks = SubtaskSerializer(many=True, read_only=True)\n\n    class Meta:\n        model = Tasks\n        exclude = ('status',)\n\n\nclass ColumnSerializer(serializers.ModelSerializer):\n    tasks = TaskSerializer(many=True, read_only=True)\n\n    class Meta:\n        model = Column\n        fields = '__all__'\n
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/tasks/serializer.py b/tasks/serializer.py
--- a/tasks/serializer.py	(revision 7d486bc32c44d53a309d6b574244cde5b2f0df1c)
+++ b/tasks/serializer.py	(date 1695040728671)
@@ -8,7 +8,7 @@
 class ColumnModelSerializer(ModelSerializer):
     class Meta:
         model = Column
-        fields = ('name', 'board')
+        fields = ('id', 'name', 'board')
 
 
 class CreateBoardSerializer(serializers.Serializer):
@@ -59,3 +59,44 @@
     class Meta:
         model = Column
         fields = '__all__'
+
+
+class BoardDetailSerializer(serializers.ModelSerializer):
+    columns = serializers.SerializerMethodField()
+
+    class Meta:
+        model = Board
+        fields = '__all__'
+
+    def get_columns(self, obj):
+        columns_data = []
+        for column in obj.columns.all():
+            column_data = {
+                "id": column.id,
+                "name": column.name,
+                "tasks": self.get_tasks(column)
+            }
+            columns_data.append(column_data)
+        return columns_data
+
+    def get_tasks(self, column):
+        tasks_data = []
+        for task in column.tasks.all():
+            task_data = {
+                "title": task.title,
+                "description": task.description,
+                "difficulty": task.difficulty,
+                "subtasks": self.get_subtasks(task)
+            }
+            tasks_data.append(task_data)
+        return tasks_data
+
+    def get_subtasks(self, task):
+        subtasks_data = []
+        for subtask in task.subtasks.all():
+            subtask_data = {
+                "name": subtask.name,
+                "is_completed": subtask.is_completed
+            }
+            subtasks_data.append(subtask_data)
+        return subtasks_data
Index: tasks/views.py
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+>from rest_framework import status\nfrom rest_framework.generics import CreateAPIView, ListAPIView\nfrom rest_framework.response import Response\n\nfrom tasks.models import Board, Column, Tasks, Subtasks\nfrom tasks.pagination import CustomPagination\nfrom tasks.response_json import CustomRenderer\nfrom tasks.serializer import (BordModelSerializer, CreateBoardSerializer, ColumnModelSerializer, TaskSerializer)\n\n\nclass BoardListAPIView(ListAPIView):\n    queryset = Board.objects.all()\n    serializer_class = BordModelSerializer\n    renderer_classes = [CustomRenderer]\n    pagination_class = CustomPagination\n\n\nclass ColumnListAPIView(ListAPIView):\n    queryset = Column.objects.all()\n    serializer_class = ColumnModelSerializer\n    renderer_classes = [CustomRenderer]\n    pagination_class = CustomPagination\n\n\nclass BoardCreateAPIView(CreateAPIView):\n    serializer_class = CreateBoardSerializer\n\n    def create(self, request, *args, **kwargs):\n        serializer = self.get_serializer(request.data).data\n        board = Board.objects.create(name=serializer.get('name'))\n        board.save()\n        for column in serializer.get('columns'):\n            col = Column.objects.create(board=board, name=column)\n            col.save()\n        serializer = BordModelSerializer(board, read_only=True)\n        return Response(serializer.data, status=status.HTTP_201_CREATED)\n\n\n# Get Columns with Board_id\n\nclass BoardColumnListAPIView(ListAPIView):\n    queryset = Board.objects.all()\n    serializer_class = ColumnModelSerializer\n    renderer_classes = [CustomRenderer]\n    pagination_class = CustomPagination\n\n    # Get columns from board ID\n    def get_queryset(self):\n        board_id = self.kwargs.get('board_id')\n        queryset = Column.objects.filter(board_id=board_id)\n        return queryset\n\n\n# Get Tasks with Column_id\n\nclass TaskListByColumnAPIView(ListAPIView):\n    serializer_class = TaskSerializer\n    renderer_classes = [CustomRenderer]\n    pagination_class = CustomPagination\n\n    # Get tasks from column ID\n    def get_queryset(self):\n        column_id = self.kwargs['column_id']\n        return Tasks.objects.filter(status__id=column_id)\n\n\nclass TaskCreateAPIView(CreateAPIView):\n    serializer_class = TaskSerializer\n\n    def create(self, request, *args, **kwargs):\n        column_id = request.data.get('column_id')\n\n        try:\n            column = Column.objects.get(id=column_id)\n        except Column.DoesNotExist:\n            return Response({\"error\": \"Column does not exist\"}, status=status.HTTP_400_BAD_REQUEST)\n\n        task_serializer = self.get_serializer(data=request.data)\n        task_serializer.is_valid(raise_exception=True)\n\n        task = task_serializer.save(status=column)\n\n        # Create Subtasks\n        subtasks_data = request.data.get('subtasks', [])\n        for subtask_data in subtasks_data:\n            Subtasks.objects.create(task=task, **subtask_data)\n\n        response_serializer = TaskSerializer(task)\n        return Response(response_serializer.data, status=status.HTTP_201_CREATED)\n
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/tasks/views.py b/tasks/views.py
--- a/tasks/views.py	(revision 7d486bc32c44d53a309d6b574244cde5b2f0df1c)
+++ b/tasks/views.py	(date 1695040559099)
@@ -1,12 +1,15 @@
 from rest_framework import status
-from rest_framework.generics import CreateAPIView, ListAPIView
+from rest_framework.generics import CreateAPIView, ListAPIView, RetrieveAPIView
 from rest_framework.response import Response
 
 from tasks.models import Board, Column, Tasks, Subtasks
 from tasks.pagination import CustomPagination
 from tasks.response_json import CustomRenderer
-from tasks.serializer import (BordModelSerializer, CreateBoardSerializer, ColumnModelSerializer, TaskSerializer)
+from tasks.serializer import (BordModelSerializer, CreateBoardSerializer, ColumnModelSerializer, TaskSerializer,
+                              SubtaskSerializer,  BoardDetailSerializer)
 
+
+# Board List
 
 class BoardListAPIView(ListAPIView):
     queryset = Board.objects.all()
@@ -15,6 +18,8 @@
     pagination_class = CustomPagination
 
 
+# Column List
+
 class ColumnListAPIView(ListAPIView):
     queryset = Column.objects.all()
     serializer_class = ColumnModelSerializer
@@ -22,6 +27,8 @@
     pagination_class = CustomPagination
 
 
+#  Board Create
+
 class BoardCreateAPIView(CreateAPIView):
     serializer_class = CreateBoardSerializer
 
@@ -64,6 +71,8 @@
         return Tasks.objects.filter(status__id=column_id)
 
 
+# Task Create
+
 class TaskCreateAPIView(CreateAPIView):
     serializer_class = TaskSerializer
 
@@ -85,5 +94,18 @@
         for subtask_data in subtasks_data:
             Subtasks.objects.create(task=task, **subtask_data)
 
-        response_serializer = TaskSerializer(task)
-        return Response(response_serializer.data, status=status.HTTP_201_CREATED)
+        response_data = {
+            'column_id': column_id,
+            'title': task.title,
+            'description': task.description,
+            'difficulty': task.difficulty,
+            'subtasks': SubtaskSerializer(task.subtasks, many=True).data
+        }
+
+        return Response(response_data, status=status.HTTP_201_CREATED)
+
+
+class BoardDetailRetrieveAPIView(RetrieveAPIView):
+    queryset = Board.objects.all()
+    serializer_class = BoardDetailSerializer
+    lookup_field = 'id'
Index: tasks/urls.py
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+>from django.urls import path\n\nfrom tasks.views import BoardListAPIView, BoardCreateAPIView, BoardColumnListAPIView, TaskCreateAPIView, \\\n    TaskListByColumnAPIView, ColumnListAPIView\n\nurlpatterns = [\n    # path('', include(router.urls)),\n    path('board_list', BoardListAPIView.as_view(), name='board-list'),\n    path('column-list', ColumnListAPIView.as_view(), name='column-list'),\n    path('board', BoardCreateAPIView.as_view(), name='board-create'),\n    path('task', TaskCreateAPIView.as_view(), name='task-create'),\n    path('board_id/<int:board_id>', BoardColumnListAPIView.as_view(), name='board-column-list'),\n    path('column_id/<int:column_id>', TaskListByColumnAPIView.as_view(), name='column-task-list'),\n\n]
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/tasks/urls.py b/tasks/urls.py
--- a/tasks/urls.py	(revision 7d486bc32c44d53a309d6b574244cde5b2f0df1c)
+++ b/tasks/urls.py	(date 1695040268433)
@@ -1,15 +1,16 @@
 from django.urls import path
 
-from tasks.views import BoardListAPIView, BoardCreateAPIView, BoardColumnListAPIView, TaskCreateAPIView, \
-    TaskListByColumnAPIView, ColumnListAPIView
+from tasks.views import (BoardListAPIView, BoardCreateAPIView, BoardColumnListAPIView, TaskCreateAPIView,
+                         TaskListByColumnAPIView, ColumnListAPIView, BoardDetailRetrieveAPIView)
 
 urlpatterns = [
     # path('', include(router.urls)),
     path('board_list', BoardListAPIView.as_view(), name='board-list'),
     path('column-list', ColumnListAPIView.as_view(), name='column-list'),
-    path('board', BoardCreateAPIView.as_view(), name='board-create'),
-    path('task', TaskCreateAPIView.as_view(), name='task-create'),
-    path('board_id/<int:board_id>', BoardColumnListAPIView.as_view(), name='board-column-list'),
-    path('column_id/<int:column_id>', TaskListByColumnAPIView.as_view(), name='column-task-list'),
+    path('board', BoardCreateAPIView.as_view(), name='board'),
+    path('task', TaskCreateAPIView.as_view(), name='task'),
+    path('board_id/<int:board_id>', BoardColumnListAPIView.as_view(), name='board_id'),
+    path('column_id/<int:column_id>', TaskListByColumnAPIView.as_view(), name='column_id'),
+    path('board_detail/<int:id>/', BoardDetailRetrieveAPIView.as_view(), name='board-detail'),
 
-]
\ No newline at end of file
+]
